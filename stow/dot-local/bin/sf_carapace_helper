#!/usr/bin/env python3
import sys
import re
import json
import os
from pathlib import Path
from typing import List, Tuple, Optional, Union, Callable


def echoerr(message: str) -> None:
    """Print message to stderr."""
    print(message, file=sys.stderr)


def upfind(directory: Union[str, Path], target_file: str) -> Optional[Path]:
    """
    Find target_file in directory or any parent directory using recursion.
    """
    current: Path = Path(directory).resolve()
    home: Path = Path.home().resolve()

    # Base case 1: Found the target file
    if (current / target_file).exists():
        return current

    # Base case 2: Reached root or home directory
    if current == current.parent or current == home:
        return None

    # Recursive case: Check parent directory
    return upfind(current.parent, target_file)


def project_root() -> Path:
    """Find the SFDX project root directory."""
    root: Optional[Path] = upfind(Path.cwd(), "sfdx-project.json")
    if not root:
        echoerr("no sfdx-project.json found in any parent directory")
        sys.exit(1)
    return root


def find_files(
    directory: Union[str, Path], pattern: str, exclude_pattern: Optional[str] = None
) -> List[Path]:
    """
    Find files matching pattern in directory, recursively.
    """
    base_dir = Path(directory)
    results: List[Path] = []

    for root_dir, dirs, files in os.walk(base_dir):
        # Skip hidden directories and files
        dirs[:] = [d for d in dirs if not d.startswith(".") and not d.startswith("@")]

        path_root = Path(root_dir)
        for filename in files:
            if re.match(pattern, filename):
                full_path: Path = path_root / filename
                if exclude_pattern and re.search(exclude_pattern, str(full_path)):
                    continue

                results.append(full_path)

    return results


def sort_files_by_modification_time(
    files: List[Path], reverse: bool = True
) -> List[Tuple[Path, float]]:
    """
    Sort files by their modification time.

    Args:
        files: List of Path objects to sort
        reverse: If True, sort newest first (descending); otherwise, oldest first

    Returns:
        List of tuples containing (file_path, modification_time) sorted by time
    """
    # Get file paths with their modification times for sorting
    file_with_times: List[Tuple[Path, float]] = [
        (file_path, file_path.stat().st_mtime) for file_path in files
    ]

    # Sort by modification time
    file_with_times.sort(key=lambda x: x[1], reverse=reverse)

    return file_with_times


def metadata_names() -> List[str]:
    """
    List metadata names in the project.
    Returns metadata sorted by last modified time (newest first).
    """
    project_dir: Path = project_root()

    # Find all -meta.xml files
    meta_files: List[Path] = find_files(project_dir, r".*-meta\.xml$")

    # Sort files by modification time (newest first)
    sorted_files = sort_files_by_modification_time(meta_files)

    # Process sorted files
    result: List[str] = []
    for file_path, _ in sorted_files:
        relative_path: Path = file_path.relative_to(project_dir)

        # Apply transformations similar to the sed commands
        # 1. Extract object name for custom fields
        rel_path_str = str(relative_path)
        match = re.search(r"objects/(.*)/.*/(.*)$", rel_path_str)
        if match:
            file_path_str = f"{match.group(1)}.{match.group(2)}"
        else:
            file_path_str = str(file_path)

        # 2. Get basename
        basename: str = Path(file_path_str).name

        # 3. Handle -meta.xml suffix
        match = re.match(r"^(.*)\.(.*)-meta\.xml$", basename)
        if match:
            basename = f"{match.group(2)}:{match.group(1)}"

        # 4. Replace type names where needed
        replacements: dict[str, str] = {
            "cls:": "ApexClass:",
            "object:": "CustomObject:",
            "field:": "CustomField:",
            "trigger:": "ApexTrigger:",
            "site": "CustomSite",
            "resource": "StaticResource",
        }
        for old, new in replacements.items():
            basename = basename.replace(old, new)

        # 5. Make the first letter uppercase
        if basename:
            basename = basename[0].upper() + basename[1:]

        result.append(basename)

    return result


def test_classes() -> List[str]:
    """Find test classes in the project."""
    project_dir: Path = project_root()
    test_files: List[Path] = find_files(project_dir, r".*Test\.cls$")

    # Sort by modification time (newest first)
    sorted_files = sort_files_by_modification_time(test_files)

    result: List[str] = []
    for file_path, _ in sorted_files:
        # Extract class name without path and .cls extension
        class_name: str = file_path.name.replace(".cls", "")
        result.append(class_name)

    return result


def usernames() -> List[str]:
    """List SFDX usernames."""
    sfdx_dir: Path = Path.home() / ".sfdx"
    result: List[str] = []

    if sfdx_dir.exists():
        for file_path in sfdx_dir.iterdir():
            filename = file_path.name
            if "@" in filename and filename.endswith(".json"):
                result.append(filename[:-5])  # Remove .json extension

    return result


def aliases() -> List[str]:
    """List SFDX aliases."""
    alias_file: Path = Path.home() / ".sfdx" / "alias.json"
    if not alias_file.is_file():
        return []

    # Get usernames
    usernames_list: List[str] = usernames()

    # Read alias file
    with alias_file.open("r") as f:
        alias_data: dict = json.load(f)

    result: List[str] = []
    for alias, username in alias_data.get("orgs", {}).items():
        if username in usernames_list:
            result.append(alias)

    return result


def orgs() -> List[str]:
    """List all SFDX orgs (usernames and aliases)."""
    return usernames() + aliases()


def main() -> None:
    if len(sys.argv) < 2:
        echoerr("No subcommand provided")
        sys.exit(1)

    command: str = sys.argv[1]
    args: List[str] = sys.argv[2:]

    # Check if the command exists as a function
    if command in globals() and callable(globals()[command]):
        func: Callable = globals()[command]
        result: Optional[Union[str, List[str]]] = func(*args)

        if isinstance(result, list):
            for item in result:
                print(item)
        elif result is not None:
            print(result)
    else:
        echoerr(f"subcommand {command} not recognized")
        sys.exit(1)


if __name__ == "__main__":
    main()
