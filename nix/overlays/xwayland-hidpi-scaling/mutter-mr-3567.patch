From bfef8a670d4a18a136f790b9dc4d2a5dbb63fd27 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Fri, 16 Aug 2024 23:07:52 +0200
Subject: [PATCH 1/8] xwayland: Remove trailing whitespace

---
 src/wayland/meta-xwayland.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/wayland/meta-xwayland.c b/src/wayland/meta-xwayland.c
index db0a4a271a4..9a664afcbfd 100644
--- a/src/wayland/meta-xwayland.c
+++ b/src/wayland/meta-xwayland.c
@@ -1114,7 +1114,7 @@ meta_xwayland_init (MetaXWaylandManager    *manager,
 
   if (policy != META_X11_DISPLAY_POLICY_DISABLED)
     manager->prepare_shutdown_id = g_signal_connect (compositor, "prepare-shutdown",
-                                                     G_CALLBACK (meta_xwayland_shutdown), 
+                                                     G_CALLBACK (meta_xwayland_shutdown),
                                                      NULL);
 
   /* Xwayland specific protocol, needs to be filtered out for all other clients */
-- 
GitLab


From 238b05da2f5b51f5c5ca367be5df71c83222c04a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Fri, 16 Aug 2024 23:06:23 +0200
Subject: [PATCH 2/8] test-client: Move a GdkDisplay to the toplevel scope

It's already used in a couple of places.
---
 src/tests/test-client.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/tests/test-client.c b/src/tests/test-client.c
index 56f32b16e1f..3212e9b8eac 100644
--- a/src/tests/test-client.c
+++ b/src/tests/test-client.c
@@ -281,6 +281,7 @@ text_clear_func (GtkClipboard *clipboard,
 static void
 process_line (const char *line)
 {
+  GdkDisplay *display = gdk_display_get_default ();
   GError *error = NULL;
   int argc;
   char **argv;
@@ -474,7 +475,6 @@ process_line (const char *line)
           goto out;
         }
 
-      GdkDisplay *display = gdk_display_get_default ();
       GdkWindow *gdkwindow = gtk_widget_get_window (window);
       Display *xdisplay = gdk_x11_display_get_xdisplay (display);
       Window xwindow = GDK_WINDOW_XID (gdkwindow);
@@ -897,7 +897,6 @@ process_line (const char *line)
     }
   else if (strcmp (argv[0], "clipboard-set") == 0)
     {
-      GdkDisplay *display = gdk_display_get_default ();
       GtkClipboard *clipboard;
       GdkAtom atom;
       GtkTargetList *target_list;
-- 
GitLab


From 9394af3bf51f93029af4e05ade9e62ed0193cdd3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Tue, 12 Dec 2023 22:41:20 +0100
Subject: [PATCH 3/8] x11-display: Expose UI scaling factor via D-Bus

This replaces the `legacy-ui-scaling-factor` entry in
`org.gnome.Mutter.DisplayConfig`, with the motivation being to no longer
expose X11 specific state via the monitor configuration API.
---
 .../org.gnome.Mutter.DisplayConfig.xml        |  4 --
 data/dbus-interfaces/org.gnome.Mutter.X11.xml |  8 +++
 src/backends/meta-monitor-manager.c           |  7 --
 src/meson.build                               |  5 ++
 src/x11/meta-x11-display.c                    | 64 ++++++++++++++++++-
 5 files changed, 76 insertions(+), 12 deletions(-)
 create mode 100644 data/dbus-interfaces/org.gnome.Mutter.X11.xml

diff --git a/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml b/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml
index b05337d74f5..7294c57a84c 100644
--- a/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml
+++ b/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml
@@ -426,10 +426,6 @@
 				       always use the same scale. Absence of
 				       this means logical monitor scales can
 				       differ.
-	* "legacy-ui-scaling-factor" (i): The legacy scaling factor traditionally
-				          used to scale X11 clients (commonly
-					  communicated via the
-					  Gdk/WindowScalingFactor XSetting entry).
     -->
     <method name="GetCurrentState">
       <arg name="serial" direction="out" type="u" />
diff --git a/data/dbus-interfaces/org.gnome.Mutter.X11.xml b/data/dbus-interfaces/org.gnome.Mutter.X11.xml
new file mode 100644
index 00000000000..3d3c8a42f87
--- /dev/null
+++ b/data/dbus-interfaces/org.gnome.Mutter.X11.xml
@@ -0,0 +1,8 @@
+<!DOCTYPE node PUBLIC
+'-//freedesktop//DTD D-BUS Object Introspection 1.0//EN'
+'http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd'>
+<node>
+  <interface name="org.gnome.Mutter.X11">
+    <property name="UiScalingFactor" type="i" access="readwrite" />
+  </interface>
+</node>
diff --git a/src/backends/meta-monitor-manager.c b/src/backends/meta-monitor-manager.c
index b40bd1f339f..13b81a6a4fd 100644
--- a/src/backends/meta-monitor-manager.c
+++ b/src/backends/meta-monitor-manager.c
@@ -1948,14 +1948,12 @@ meta_monitor_manager_handle_get_current_state (MetaDBusDisplayConfig *skeleton,
                                                GDBusMethodInvocation *invocation,
                                                MetaMonitorManager    *manager)
 {
-  MetaSettings *settings = meta_backend_get_settings (manager->backend);
   GVariantBuilder monitors_builder;
   GVariantBuilder logical_monitors_builder;
   GVariantBuilder properties_builder;
   GList *l;
   int i;
   MetaMonitorManagerCapability capabilities;
-  int ui_scaling_factor;
   int max_screen_width, max_screen_height;
 
   g_variant_builder_init (&monitors_builder,
@@ -2158,11 +2156,6 @@ meta_monitor_manager_handle_get_current_state (MetaDBusDisplayConfig *skeleton,
                              g_variant_new_boolean (TRUE));
     }
 
-  ui_scaling_factor = meta_settings_get_ui_scaling_factor (settings);
-  g_variant_builder_add (&properties_builder, "{sv}",
-                         "legacy-ui-scaling-factor",
-                         g_variant_new_int32 (ui_scaling_factor));
-
   if (meta_monitor_manager_get_max_screen_size (manager,
                                                 &max_screen_width,
                                                 &max_screen_height))
diff --git a/src/meson.build b/src/meson.build
index eac19e1f892..a3a6b23d855 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -964,6 +964,11 @@ dbus_interfaces = [
     'interface': 'org.gnome.Mutter.DebugControl.xml',
     'prefix': 'org.gnome.Mutter',
   },
+  {
+    'name': 'meta-dbus-x11',
+    'interface': 'org.gnome.Mutter.X11.xml',
+    'prefix': 'org.gnome.Mutter',
+  },
 ]
 
 if have_profiler
diff --git a/src/x11/meta-x11-display.c b/src/x11/meta-x11-display.c
index 267fa1b8355..8b8519d0c5a 100644
--- a/src/x11/meta-x11-display.c
+++ b/src/x11/meta-x11-display.c
@@ -71,7 +71,7 @@
 #include "wayland/meta-xwayland-private.h"
 #endif
 
-G_DEFINE_TYPE (MetaX11Display, meta_x11_display, G_TYPE_OBJECT)
+#include "meta-dbus-x11.h"
 
 static GQuark quark_x11_display_logical_monitor_data = 0;
 
@@ -90,6 +90,14 @@ typedef struct _MetaX11DisplayLogicalMonitorData
   int xinerama_index;
 } MetaX11DisplayLogicalMonitorData;
 
+typedef struct _MetaX11DisplayPrivate
+{
+  MetaDBusX11 *dbus_api;
+  guint dbus_name_id;
+} MetaX11DisplayPrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (MetaX11Display, meta_x11_display, G_TYPE_OBJECT)
+
 static char *get_screen_name (Display *xdisplay,
                               int      number);
 
@@ -152,13 +160,46 @@ meta_x11_event_filter_free (MetaX11EventFilter *filter)
   g_free (filter);
 }
 
+static void
+on_bus_acquired (GDBusConnection *connection,
+                 const char      *name,
+                 gpointer         user_data)
+{
+  MetaX11Display *x11_display = user_data;
+  MetaX11DisplayPrivate *priv =
+    meta_x11_display_get_instance_private (x11_display);
+
+  g_dbus_interface_skeleton_export (G_DBUS_INTERFACE_SKELETON (priv->dbus_api),
+                                    connection,
+                                    "/org/gnome/Mutter/X11",
+                                    NULL);
+}
+
+static void
+update_ui_scaling_factor (MetaX11Display *x11_display)
+{
+  MetaX11DisplayPrivate *priv =
+    meta_x11_display_get_instance_private (x11_display);
+  MetaBackend *backend = backend_from_x11_display (x11_display);
+  MetaSettings *settings = meta_backend_get_settings (backend);
+  int ui_scaling_factor;
+
+  ui_scaling_factor = meta_settings_get_ui_scaling_factor (settings);
+  meta_dbus_x11_set_ui_scaling_factor (priv->dbus_api, ui_scaling_factor);
+}
+
 static void
 meta_x11_display_dispose (GObject *object)
 {
   MetaX11Display *x11_display = META_X11_DISPLAY (object);
+  MetaX11DisplayPrivate *priv =
+    meta_x11_display_get_instance_private (x11_display);
 
   x11_display->closing = TRUE;
 
+  g_clear_handle_id (&priv->dbus_name_id, g_bus_unown_name);
+  g_clear_object (&priv->dbus_api);
+
   g_clear_pointer (&x11_display->alarm_filters, g_ptr_array_unref);
 
   g_clear_list (&x11_display->event_funcs,
@@ -1221,6 +1262,23 @@ meta_x11_display_init_frames_client (MetaX11Display *x11_display)
                            on_frames_client_died, x11_display);
 }
 
+static void
+initialize_dbus_interface (MetaX11Display *x11_display)
+{
+  MetaX11DisplayPrivate *priv =
+    meta_x11_display_get_instance_private (x11_display);
+
+  priv->dbus_api = meta_dbus_x11_skeleton_new ();
+  priv->dbus_name_id =
+    g_bus_own_name (G_BUS_TYPE_SESSION,
+                    "org.gnome.Mutter.X11",
+                    G_BUS_NAME_OWNER_FLAGS_NONE,
+                    on_bus_acquired,
+                    NULL, NULL,
+                    x11_display, NULL);
+  update_ui_scaling_factor (x11_display);
+}
+
 /**
  * meta_x11_display_new:
  *
@@ -1317,6 +1375,8 @@ meta_x11_display_new (MetaDisplay  *display,
   x11_display = g_object_new (META_TYPE_X11_DISPLAY, NULL);
   x11_display->display = display;
 
+  initialize_dbus_interface (x11_display);
+
   /* here we use XDisplayName which is what the user
    * probably put in, vs. DisplayString(display) which is
    * canonicalized by XOpenDisplay()
@@ -1980,6 +2040,8 @@ on_monitors_changed_internal (MetaMonitorManager *monitor_manager,
     }
 
   x11_display->has_xinerama_indices = FALSE;
+
+  update_ui_scaling_factor (x11_display);
 }
 
 static Bool
-- 
GitLab


From aa22adb931b530fd301b8134aa5760901e6bec20 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20Dre=C3=9Fler?= <verdre@v0yd.nl>
Date: Tue, 20 Feb 2024 23:51:48 +0100
Subject: [PATCH 4/8] Add an experimental feature for letting Xwayland clients
 scale natively

With the next commits we'll introduce a new mode for scaling of Xwayland apps,
we'll want to put this mode behind an experimental setting though, so add
that setting.
---
 data/org.gnome.mutter.gschema.xml.in | 7 +++++++
 src/backends/meta-settings-private.h | 1 +
 src/backends/meta-settings.c         | 2 ++
 3 files changed, 10 insertions(+)

diff --git a/data/org.gnome.mutter.gschema.xml.in b/data/org.gnome.mutter.gschema.xml.in
index 92c97b12e33..6751a8d7a99 100644
--- a/data/org.gnome.mutter.gschema.xml.in
+++ b/data/org.gnome.mutter.gschema.xml.in
@@ -5,6 +5,7 @@
     <value nick="kms-modifiers" value="2"/>
     <value nick="autoclose-xwayland" value="4"/>
     <value nick="variable-refresh-rate" value="8"/>
+    <value nick="xwayland-native-scaling" value="16"/>
   </flags>
 
   <schema id="org.gnome.mutter" path="/org/gnome/mutter/"
@@ -136,6 +137,12 @@
                                         GPU and DRM driver. Configurable in
                                         Settings. Requires a restart.
 
+        • “xwayland-native-scaling”   — lets Xwayland clients use their native
+                                        scaling support. If scaling is not
+                                        supported by client, the client will
+                                        be unscaled. Setting only takes effect
+                                        when “scale-monitor-framebuffer” is
+                                        enabled as well.
       </description>
     </key>
 
diff --git a/src/backends/meta-settings-private.h b/src/backends/meta-settings-private.h
index afbba054af0..2081a81b1a4 100644
--- a/src/backends/meta-settings-private.h
+++ b/src/backends/meta-settings-private.h
@@ -32,6 +32,7 @@ typedef enum _MetaExperimentalFeature
   META_EXPERIMENTAL_FEATURE_KMS_MODIFIERS  = (1 << 1),
   META_EXPERIMENTAL_FEATURE_AUTOCLOSE_XWAYLAND  = (1 << 2),
   META_EXPERIMENTAL_FEATURE_VARIABLE_REFRESH_RATE = (1 << 3),
+  META_EXPERIMENTAL_FEATURE_XWAYLAND_NATIVE_SCALING  = (1 << 4),
 } MetaExperimentalFeature;
 
 typedef enum _MetaXwaylandExtension
diff --git a/src/backends/meta-settings.c b/src/backends/meta-settings.c
index 3703b23b077..1ae59d6360b 100644
--- a/src/backends/meta-settings.c
+++ b/src/backends/meta-settings.c
@@ -296,6 +296,8 @@ experimental_features_handler (GVariant *features_variant,
         feature = META_EXPERIMENTAL_FEATURE_AUTOCLOSE_XWAYLAND;
       else if (g_str_equal (feature_str, "variable-refresh-rate"))
         feature = META_EXPERIMENTAL_FEATURE_VARIABLE_REFRESH_RATE;
+      else if (g_str_equal (feature_str, "xwayland-native-scaling"))
+        feature = META_EXPERIMENTAL_FEATURE_XWAYLAND_NATIVE_SCALING;
 
       if (feature)
         g_message ("Enabling experimental feature '%s'", feature_str);
-- 
GitLab


From c806b20e217eb853700984b2d94948b443d5ec2f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Fri, 16 Aug 2024 23:03:43 +0200
Subject: [PATCH 5/8] xwayland: Set primary monitor using connector name

We know let Xwayland set the RANDR names from the connectors. To stop
relying on layouts and coordinates to match the primary logical monitor,
instead use the connector name of the first monitor.

Also make the X11 client sanity checking check that the right X11 output
is primary as part of the monitor tests.
---
 src/tests/monitor-unit-tests.c | 41 ++++++++++++++++++++++++++++++++++
 src/wayland/meta-xwayland.c    | 32 +++++++++-----------------
 2 files changed, 51 insertions(+), 22 deletions(-)

diff --git a/src/tests/monitor-unit-tests.c b/src/tests/monitor-unit-tests.c
index 80730a58f8e..2e0539fc161 100644
--- a/src/tests/monitor-unit-tests.c
+++ b/src/tests/monitor-unit-tests.c
@@ -226,11 +226,52 @@ check_test_client_state (MetaTestClient *test_client)
     }
 }
 
+static void
+check_test_client_x11_state (MetaTestClient *test_client)
+{
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (test_backend);
+  MetaLogicalMonitor *primary_logical_monitor;
+  MetaMonitor *primary_monitor = NULL;
+  GError *error = NULL;
+
+  primary_logical_monitor =
+    meta_monitor_manager_get_primary_logical_monitor (monitor_manager);
+
+  if (primary_logical_monitor)
+    {
+      GList *monitors;
+
+      monitors = meta_logical_monitor_get_monitors (primary_logical_monitor);
+      primary_monitor = g_list_first (monitors)->data;
+    }
+
+  if (!meta_test_client_do (test_client, &error,
+                            "sync",
+                            NULL))
+    {
+      g_error ("Failed to sync test client '%s': %s",
+               meta_test_client_get_id (test_client), error->message);
+    }
+
+  if (!meta_test_client_do (test_client, &error,
+                            "assert_primary_monitor",
+                            primary_monitor
+                              ? meta_monitor_get_connector (primary_monitor)
+                              : "(none)",
+                              NULL))
+    {
+      g_error ("Failed to assert primary monitor in X11 test client '%s': %s",
+               meta_test_client_get_id (test_client), error->message);
+    }
+}
+
 static void
 check_monitor_test_clients_state (void)
 {
   check_test_client_state (wayland_monitor_test_client);
   check_test_client_state (x11_monitor_test_client);
+  check_test_client_x11_state (x11_monitor_test_client);
 }
 
 static void
diff --git a/src/wayland/meta-xwayland.c b/src/wayland/meta-xwayland.c
index 9a664afcbfd..406f8d21802 100644
--- a/src/wayland/meta-xwayland.c
+++ b/src/wayland/meta-xwayland.c
@@ -1216,15 +1216,19 @@ meta_xwayland_set_primary_output (MetaX11Display *x11_display)
   MetaMonitorManager *monitor_manager =
     monitor_manager_from_x11_display (x11_display);
   XRRScreenResources *resources;
-  MetaLogicalMonitor *primary_monitor;
+  MetaLogicalMonitor *primary_logical_monitor;
+  GList *monitors;
+  MetaMonitor *primary_monitor;
   int i;
 
-  primary_monitor =
+  primary_logical_monitor =
     meta_monitor_manager_get_primary_logical_monitor (monitor_manager);
-
-  if (!primary_monitor)
+  if (!primary_logical_monitor)
     return;
 
+  monitors = meta_logical_monitor_get_monitors (primary_logical_monitor);
+  primary_monitor = g_list_first (monitors)->data;
+
   resources = XRRGetScreenResourcesCurrent (xdisplay,
                                             DefaultRootWindow (xdisplay));
   if (!resources)
@@ -1235,29 +1239,13 @@ meta_xwayland_set_primary_output (MetaX11Display *x11_display)
     {
       RROutput output_id = resources->outputs[i];
       XRROutputInfo *xrandr_output;
-      XRRCrtcInfo *crtc_info = NULL;
-      MtkRectangle crtc_geometry;
 
       xrandr_output = XRRGetOutputInfo (xdisplay, resources, output_id);
       if (!xrandr_output)
         continue;
 
-      if (xrandr_output->crtc)
-        crtc_info = XRRGetCrtcInfo (xdisplay, resources, xrandr_output->crtc);
-
-      XRRFreeOutputInfo (xrandr_output);
-
-      if (!crtc_info)
-        continue;
-
-      crtc_geometry.x = crtc_info->x;
-      crtc_geometry.y = crtc_info->y;
-      crtc_geometry.width = crtc_info->width;
-      crtc_geometry.height = crtc_info->height;
-
-      XRRFreeCrtcInfo (crtc_info);
-
-      if (mtk_rectangle_equal (&crtc_geometry, &primary_monitor->rect))
+      if (g_strcmp0 (xrandr_output->name,
+                     meta_monitor_get_connector (primary_monitor)) == 0)
         {
           XRRSetOutputPrimary (xdisplay, DefaultRootWindow (xdisplay),
                                output_id);
-- 
GitLab


From cb01def28b37e531e5b3633d76620915a9818ac0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Fri, 16 Aug 2024 23:06:53 +0200
Subject: [PATCH 6/8] test-client: Add 'assert_primary_monitor'

This is a X11 only assert, as only X11 has the concept of a primary
monitor.
---
 src/tests/meson.build   |  1 +
 src/tests/test-client.c | 60 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+)

diff --git a/src/tests/meson.build b/src/tests/meson.build
index b21af313d87..eae58f362e5 100644
--- a/src/tests/meson.build
+++ b/src/tests/meson.build
@@ -170,6 +170,7 @@ test_client = executable('mutter-test-client',
     gio_unix_dep,
     x11_dep,
     xext_dep,
+    xrandr_dep,
     graphene_dep,
     gsettings_desktop_schemas_dep,
   ],
diff --git a/src/tests/test-client.c b/src/tests/test-client.c
index 3212e9b8eac..4411f2e4f38 100644
--- a/src/tests/test-client.c
+++ b/src/tests/test-client.c
@@ -26,6 +26,7 @@
 #include <stdarg.h>
 #include <stdlib.h>
 #include <string.h>
+#include <X11/extensions/Xrandr.h>
 #include <X11/extensions/sync.h>
 
 #include "core/events.h"
@@ -875,6 +876,65 @@ process_line (const char *line)
           goto out;
         }
     }
+  else if (strcmp (argv[0], "assert_primary_monitor") == 0)
+    {
+      Display *xdisplay = gdk_x11_display_get_xdisplay (display);
+      GdkWindow *root_window = gdk_screen_get_root_window ((gdk_screen_get_default ()));
+      Window root_xwindow = gdk_x11_window_get_xid (root_window);
+      XRRScreenResources *resources;
+      RROutput primary_output;
+      XRROutputInfo *output_info;
+      char *expected_name;
+
+      if (wayland)
+        {
+          g_print ("Can only assert primary monitor on X11\n");
+          goto out;
+        }
+
+      if (argc != 2)
+        {
+          g_print ("usage: %s <monitor-name>\n", argv[0]);
+          goto out;
+        }
+
+      expected_name = argv[1];
+
+      resources = XRRGetScreenResourcesCurrent (xdisplay, root_xwindow);
+      if (!resources)
+        {
+          g_print ("Failed to retrieve XRANDR resources\n");
+          goto out;
+        }
+
+      primary_output = XRRGetOutputPrimary (xdisplay, root_xwindow);
+      if (!primary_output)
+        {
+          if (g_strcmp0 (expected_name, "(none)") != 0)
+            {
+              g_print ("Failed to primary XRANDR output\n");
+              goto out;
+            }
+        }
+      else
+        {
+          output_info = XRRGetOutputInfo (xdisplay, resources, primary_output);
+          if (!output_info)
+            {
+              g_print ("Failed to primary XRANDR output info\n");
+              goto out;
+            }
+
+          if (g_strcmp0 (expected_name, output_info->name) != 0)
+            {
+              XRRFreeOutputInfo (output_info);
+              g_print ("XRANDR output %s primary, expected %s\n",
+                       output_info->name, expected_name);
+              goto out;
+            }
+          XRRFreeOutputInfo (output_info);
+        }
+    }
   else if (strcmp (argv[0], "stop_after_next") == 0)
     {
       if (sync_after_lines != -1)
-- 
GitLab


From 8a2155aa4fadfa218415b06ef94e1d63c230524b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Tue, 12 Dec 2023 22:52:44 +0100
Subject: [PATCH 7/8] Add experimental mode to use native scaling of Xwayland
 clients

Allow scale-aware Xwayland clients to scale by an integer scale
themselves, instead of letting them render them at 1x scale and then
scaling up the texture, making it look blurry.

When monitor framebuffers are scaled, this special cases Xwayland and
sends output regions in a way that Xwayland think everything is N times
as large as the logical region, where N is the ceil of the max monitor
scale.

This is done by introducing a "stage" vs "protocol" coordinate space for
X11, where the "protocol" coordinate space is "stage" multiplied by a
scaling factor.

Xwayland thus will have its own "effective scale", sent via
wl_output.scale. The effective Xwayland scale is also used for the
internal MetaWaylandSurface scale internally, unless there is a viewport
dst size set on the same surface, in which case the scale is still set
to 1, to not interfere with wp_viewport semantics.

We're guarding this behind a new experimental feature
"xwayland-native-scaling", which can only come into effect when enabled
together with "scale-monitor-framebuffer".
---
 src/backends/meta-monitor-manager-private.h |   2 +
 src/backends/meta-monitor-manager.c         |   6 +
 src/compositor/meta-window-actor-x11.c      |  23 +-
 src/wayland/meta-wayland-cursor-surface.c   |  48 ++-
 src/wayland/meta-wayland-outputs.c          |  45 ++-
 src/wayland/meta-wayland-pointer.c          |  14 +
 src/wayland/meta-wayland-private.h          |   2 +
 src/wayland/meta-wayland-surface.c          |  40 ++-
 src/wayland/meta-window-xwayland.c          |  71 ++++-
 src/wayland/meta-xwayland-private.h         |   1 +
 src/wayland/meta-xwayland-surface.c         |  10 +-
 src/wayland/meta-xwayland.c                 |  56 ++++
 src/wayland/meta-xwayland.h                 |   2 +
 src/x11/meta-x11-display.c                  | 196 +++++++++++--
 src/x11/meta-x11-frame.c                    | 104 +++++--
 src/x11/window-props.c                      | 111 ++++++-
 src/x11/window-x11.c                        | 305 ++++++++++++++++----
 src/x11/window-x11.h                        |  38 +++
 18 files changed, 911 insertions(+), 163 deletions(-)

diff --git a/src/backends/meta-monitor-manager-private.h b/src/backends/meta-monitor-manager-private.h
index 8379c50fb0a..f48b00bc268 100644
--- a/src/backends/meta-monitor-manager-private.h
+++ b/src/backends/meta-monitor-manager-private.h
@@ -432,3 +432,5 @@ gboolean meta_monitor_manager_apply_monitors_config (MetaMonitorManager        *
                                                      MetaMonitorsConfig        *config,
                                                      MetaMonitorsConfigMethod   method,
                                                      GError                   **error);
+
+MetaLogicalMonitorLayoutMode meta_monitor_manager_get_layout_mode (MetaMonitorManager *manager);
diff --git a/src/backends/meta-monitor-manager.c b/src/backends/meta-monitor-manager.c
index 13b81a6a4fd..3c27edc1a68 100644
--- a/src/backends/meta-monitor-manager.c
+++ b/src/backends/meta-monitor-manager.c
@@ -4001,3 +4001,9 @@ meta_monitor_manager_get_virtual_monitors (MetaMonitorManager *manager)
 
   return priv->virtual_monitors;
 }
+
+MetaLogicalMonitorLayoutMode
+meta_monitor_manager_get_layout_mode (MetaMonitorManager *manager)
+{
+  return manager->layout_mode;
+}
diff --git a/src/compositor/meta-window-actor-x11.c b/src/compositor/meta-window-actor-x11.c
index 491ded8d619..d6f8667750f 100644
--- a/src/compositor/meta-window-actor-x11.c
+++ b/src/compositor/meta-window-actor-x11.c
@@ -693,14 +693,27 @@ meta_window_actor_x11_process_damage (MetaWindowActorX11 *actor_x11,
                                       XDamageNotifyEvent *event)
 {
   MetaSurfaceActor *surface;
-  MtkRectangle area = MTK_RECTANGLE_INIT (event->area.x,
-                                          event->area.y,
-                                          event->area.width,
-                                          event->area.height);
 
   surface = meta_window_actor_get_surface (META_WINDOW_ACTOR (actor_x11));
   if (surface)
-    meta_surface_actor_process_damage (surface, &area);
+    {
+      MetaWindow *window =
+        meta_window_actor_get_meta_window (META_WINDOW_ACTOR (actor_x11));
+      MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
+      MtkRectangle area;
+
+      area = MTK_RECTANGLE_INIT (event->area.x,
+                                 event->area.y,
+                                 event->area.width,
+                                 event->area.height);
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         event->area.x, event->area.y,
+                                         event->area.width,  event->area.height,
+                                         &area.x, &area.y,
+                                         &area.width, &area.height);
+
+      meta_surface_actor_process_damage (surface, &area);
+    }
 
   meta_window_actor_notify_damaged (META_WINDOW_ACTOR (actor_x11));
 }
diff --git a/src/wayland/meta-wayland-cursor-surface.c b/src/wayland/meta-wayland-cursor-surface.c
index 6d853928414..96c7aa96ba5 100644
--- a/src/wayland/meta-wayland-cursor-surface.c
+++ b/src/wayland/meta-wayland-cursor-surface.c
@@ -92,33 +92,29 @@ cursor_sprite_prepare_at (MetaCursorSprite         *cursor_sprite,
 {
   MetaWaylandSurfaceRole *role = META_WAYLAND_SURFACE_ROLE (cursor_surface);
   MetaWaylandSurface *surface = meta_wayland_surface_role_get_surface (role);
-
-  if (!meta_wayland_surface_is_xwayland (surface))
+  MetaContext *context =
+    meta_wayland_compositor_get_context (surface->compositor);
+  MetaBackend *backend = meta_context_get_backend (context);
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (backend);
+  MetaLogicalMonitor *logical_monitor;
+
+  logical_monitor =
+    meta_monitor_manager_get_logical_monitor_at (monitor_manager, x, y);
+  if (logical_monitor)
     {
-      MetaContext *context =
-        meta_wayland_compositor_get_context (surface->compositor);
-      MetaBackend *backend = meta_context_get_backend (context);
-      MetaMonitorManager *monitor_manager =
-        meta_backend_get_monitor_manager (backend);
-      MetaLogicalMonitor *logical_monitor;
-
-      logical_monitor =
-        meta_monitor_manager_get_logical_monitor_at (monitor_manager, x, y);
-      if (logical_monitor)
-        {
-          int surface_scale = surface->applied_state.scale;
-          float texture_scale;
-
-          if (meta_backend_is_stage_views_scaled (backend))
-            texture_scale = 1.0f / surface_scale;
-          else
-            texture_scale = (meta_logical_monitor_get_scale (logical_monitor) /
-                             surface_scale);
-
-          meta_cursor_sprite_set_texture_scale (cursor_sprite, texture_scale);
-          meta_cursor_sprite_set_texture_transform (cursor_sprite,
-                                                    surface->buffer_transform);
-        }
+      int surface_scale = surface->applied_state.scale;
+      float texture_scale;
+
+      if (meta_backend_is_stage_views_scaled (backend))
+        texture_scale = 1.0f / surface_scale;
+      else
+        texture_scale = (meta_logical_monitor_get_scale (logical_monitor) /
+                         surface_scale);
+
+      meta_cursor_sprite_set_texture_scale (cursor_sprite, texture_scale);
+      meta_cursor_sprite_set_texture_transform (cursor_sprite,
+                                                surface->buffer_transform);
     }
 
   meta_wayland_surface_update_outputs (surface);
diff --git a/src/wayland/meta-wayland-outputs.c b/src/wayland/meta-wayland-outputs.c
index e062d25ccb1..c8dfd68731b 100644
--- a/src/wayland/meta-wayland-outputs.c
+++ b/src/wayland/meta-wayland-outputs.c
@@ -31,6 +31,10 @@
 #include "backends/meta-monitor-manager-private.h"
 #include "wayland/meta-wayland-private.h"
 
+#ifdef HAVE_XWAYLAND
+#include "wayland/meta-xwayland.h"
+#endif
+
 #include "xdg-output-unstable-v1-server-protocol.h"
 
 /* Wayland protocol headers list new additions, not deprecations */
@@ -50,6 +54,8 @@ struct _MetaWaylandOutput
 {
   GObject parent;
 
+  MetaWaylandCompositor *compositor;
+
   struct wl_global *global;
   GList *resources;
   GList *xdg_output_resources;
@@ -157,6 +163,37 @@ wl_output_transform_from_transform (MtkMonitorTransform transform)
   g_assert_not_reached ();
 }
 
+#ifdef HAVE_XWAYLAND
+static gboolean
+is_xwayland_resource (MetaWaylandOutput  *wayland_output,
+                      struct wl_resource *resource)
+{
+  MetaXWaylandManager *manager = &wayland_output->compositor->xwayland_manager;
+
+  return resource && wl_resource_get_client (resource) == manager->client;
+}
+#endif
+
+static void
+maybe_scale_for_xwayland (MetaWaylandOutput  *wayland_output,
+                          struct wl_resource *resource,
+                          int                *x,
+                          int                *y)
+{
+#ifdef HAVE_XWAYLAND
+  if (is_xwayland_resource (wayland_output, resource))
+    {
+      MetaXWaylandManager *xwayland_manager =
+        &wayland_output->compositor->xwayland_manager;
+      int xwayland_scale;
+
+      xwayland_scale = meta_xwayland_get_effective_scale (xwayland_manager);
+      *x *= xwayland_scale;
+      *y *= xwayland_scale;
+    }
+#endif
+}
+
 static void
 send_output_events (struct wl_resource *resource,
                     MetaWaylandOutput  *wayland_output,
@@ -242,6 +279,9 @@ send_output_events (struct wl_resource *resource,
 
       wl_transform = wl_output_transform_from_transform (transform);
 
+      maybe_scale_for_xwayland (wayland_output, resource,
+                                &layout.x,
+                                &layout.y);
       wl_output_send_geometry (resource,
                                layout.x,
                                layout.y,
@@ -424,6 +464,7 @@ meta_wayland_output_new (MetaWaylandCompositor *compositor,
   MetaWaylandOutput *wayland_output;
 
   wayland_output = g_object_new (META_TYPE_WAYLAND_OUTPUT, NULL);
+  wayland_output->compositor = compositor;
   wayland_output->global = wl_global_create (compositor->wayland_display,
                                              &wl_output_interface,
                                              META_WL_OUTPUT_VERSION,
@@ -618,6 +659,7 @@ send_xdg_output_events (struct wl_resource *resource,
   if (need_all_events ||
       old_layout.x != layout.x || old_layout.y != layout.y)
     {
+      maybe_scale_for_xwayland (wayland_output, resource, &layout.x, &layout.y);
       zxdg_output_v1_send_logical_position (resource, layout.x, layout.y);
       need_done = TRUE;
     }
@@ -625,6 +667,7 @@ send_xdg_output_events (struct wl_resource *resource,
   if (need_all_events ||
       old_layout.width != layout.width || old_layout.height != layout.height)
     {
+      maybe_scale_for_xwayland (wayland_output, resource, &layout.width, &layout.height);
       zxdg_output_v1_send_logical_size (resource, layout.width, layout.height);
       need_done = TRUE;
     }
@@ -747,7 +790,7 @@ meta_wayland_outputs_init (MetaWaylandCompositor *compositor)
   MetaMonitorManager *monitor_manager =
     meta_backend_get_monitor_manager (backend);
 
-  g_signal_connect (monitor_manager, "monitors-changed-internal",
+  g_signal_connect (monitor_manager, "monitors-changed",
                     G_CALLBACK (on_monitors_changed), compositor);
 
   compositor->outputs =
diff --git a/src/wayland/meta-wayland-pointer.c b/src/wayland/meta-wayland-pointer.c
index 3b2a253ef9f..589dd9ef23c 100644
--- a/src/wayland/meta-wayland-pointer.c
+++ b/src/wayland/meta-wayland-pointer.c
@@ -1248,6 +1248,20 @@ pointer_set_cursor (struct wl_client *client,
       cursor_surface = META_WAYLAND_CURSOR_SURFACE (surface->role);
       meta_wayland_cursor_surface_set_renderer (cursor_surface,
                                                 cursor_renderer);
+
+#ifdef HAVE_XWAYLAND
+      if (meta_wayland_surface_is_xwayland (surface))
+        {
+          MetaXWaylandManager *xwayland_manager =
+            &surface->compositor->xwayland_manager;
+          int scale;
+
+          scale = meta_xwayland_get_effective_scale (xwayland_manager);
+          hot_x = (int32_t) round (hot_x / (double) scale);
+          hot_y = (int32_t) round (hot_y / (double) scale);
+        }
+#endif
+
       meta_wayland_cursor_surface_set_hotspot (cursor_surface,
                                                hot_x, hot_y);
 
diff --git a/src/wayland/meta-wayland-private.h b/src/wayland/meta-wayland-private.h
index e8d442c0398..834753ffdd3 100644
--- a/src/wayland/meta-wayland-private.h
+++ b/src/wayland/meta-wayland-private.h
@@ -77,6 +77,8 @@ struct _MetaXWaylandManager
   int rr_error_base;
 
   gboolean should_enable_ei_portal;
+
+  double highest_monitor_scale;
 };
 
 struct _MetaWaylandCompositor
diff --git a/src/wayland/meta-wayland-surface.c b/src/wayland/meta-wayland-surface.c
index 25bd65aabbe..87621f9fb41 100644
--- a/src/wayland/meta-wayland-surface.c
+++ b/src/wayland/meta-wayland-surface.c
@@ -780,9 +780,6 @@ meta_wayland_surface_apply_state (MetaWaylandSurface      *surface,
           state->buffer->type != META_WAYLAND_BUFFER_TYPE_SINGLE_PIXEL));
     }
 
-  if (state->scale > 0)
-    surface->applied_state.scale = state->scale;
-
   if (state->has_new_buffer_transform)
     surface->buffer_transform = state->buffer_transform;
 
@@ -802,6 +799,28 @@ meta_wayland_surface_apply_state (MetaWaylandSurface      *surface,
       surface->viewport.has_dst_size = surface->viewport.dst_width > 0;
     }
 
+  if (meta_wayland_surface_is_xwayland (surface))
+    {
+#ifdef HAVE_XWAYLAND
+      MetaXWaylandManager *xwayland_manager =
+        &surface->compositor->xwayland_manager;
+
+      if (surface->viewport.has_dst_size)
+        {
+          surface->applied_state.scale = 1;
+        }
+      else
+        {
+          surface->applied_state.scale =
+            meta_xwayland_get_effective_scale (xwayland_manager);
+        }
+#endif
+    }
+  else if (state->scale > 0)
+    {
+      surface->applied_state.scale = state->scale;
+    }
+
   state->derived.surface_size_changed =
     meta_wayland_surface_get_width (surface) != old_width ||
     meta_wayland_surface_get_height (surface) != old_height;
@@ -976,8 +995,9 @@ meta_wayland_surface_commit (MetaWaylandSurface *surface)
       MetaMultiTexture *committed_texture = surface->committed_state.texture;
       int committed_scale = surface->committed_state.scale;
 
-      if ((meta_multi_texture_get_width (committed_texture) % committed_scale != 0) ||
-          (meta_multi_texture_get_height (committed_texture) % committed_scale != 0))
+      if (((meta_multi_texture_get_width (committed_texture) % committed_scale != 0) ||
+           (meta_multi_texture_get_height (committed_texture) % committed_scale != 0)) &&
+          !meta_wayland_surface_is_xwayland (surface))
         {
           if (surface->role && !META_IS_WAYLAND_CURSOR_SURFACE (surface->role))
             {
@@ -1507,6 +1527,16 @@ meta_wayland_surface_update_outputs (MetaWaylandSurface *surface)
   g_hash_table_foreach (surface->compositor->outputs,
                         update_surface_output_state,
                         surface);
+
+  if (meta_wayland_surface_is_xwayland (surface))
+    {
+#ifdef HAVE_XWAYLAND
+      MetaXWaylandManager *xwayland_manager =
+        &surface->compositor->xwayland_manager;
+
+      surface->applied_state.scale = meta_xwayland_get_effective_scale (xwayland_manager);
+#endif
+    }
 }
 
 void
diff --git a/src/wayland/meta-window-xwayland.c b/src/wayland/meta-window-xwayland.c
index 2a1390ef46b..75288efb397 100644
--- a/src/wayland/meta-window-xwayland.c
+++ b/src/wayland/meta-window-xwayland.c
@@ -27,8 +27,9 @@
 #include "x11/window-x11-private.h"
 #include "x11/xprops.h"
 #include "wayland/meta-window-xwayland.h"
-#include "wayland/meta-wayland.h"
+#include "wayland/meta-wayland-private.h"
 #include "wayland/meta-wayland-surface-private.h"
+#include "wayland/meta-xwayland.h"
 
 enum
 {
@@ -315,6 +316,72 @@ meta_window_xwayland_process_property_notify (MetaWindow     *window,
     meta_window_queue (window, META_QUEUE_MOVE_RESIZE);
 }
 
+static void
+meta_window_xwayland_stage_to_protocol (MetaWindowX11 *window_x11,
+                                        int            stage_x,
+                                        int            stage_y,
+                                        int            stage_width,
+                                        int            stage_height,
+                                        int           *protocol_x,
+                                        int           *protocol_y,
+                                        int           *protocol_width,
+                                        int           *protocol_height)
+{
+  MetaDisplay *display = meta_window_get_display (META_WINDOW (window_x11));
+  MetaContext *context = meta_display_get_context (display);
+  MetaWaylandCompositor *wayland_compositor =
+    meta_context_get_wayland_compositor (context);
+  MetaXWaylandManager *xwayland_manager = &wayland_compositor->xwayland_manager;
+  int scale;
+
+  scale = meta_xwayland_get_effective_scale (xwayland_manager);
+  if (protocol_x)
+    *protocol_x = stage_x * scale;
+  if (protocol_y)
+    *protocol_y = stage_y * scale;
+  if (protocol_width)
+    *protocol_width = stage_width * scale;
+  if (protocol_height)
+    *protocol_height = stage_height * scale;
+}
+
+static void
+meta_window_xwayland_protocol_to_stage (MetaWindowX11 *window_x11,
+                                        int            protocol_x,
+                                        int            protocol_y,
+                                        int            protocol_width,
+                                        int            protocol_height,
+                                        int           *stage_x,
+                                        int           *stage_y,
+                                        int           *stage_width,
+                                        int           *stage_height)
+{
+  MetaDisplay *display = meta_window_get_display (META_WINDOW (window_x11));
+  MetaContext *context = meta_display_get_context (display);
+  MetaWaylandCompositor *wayland_compositor =
+    meta_context_get_wayland_compositor (context);
+  MetaXWaylandManager *xwayland_manager = &wayland_compositor->xwayland_manager;
+  MtkRectangle rect;
+  int scale;
+
+  rect.x = protocol_x;
+  rect.y = protocol_y;
+  rect.width = protocol_width;
+  rect.height = protocol_height;
+
+  scale = meta_xwayland_get_effective_scale (xwayland_manager);
+  mtk_rectangle_scale_double (&rect, 1.0 / scale, MTK_ROUNDING_STRATEGY_GROW, &rect);
+
+  if (stage_x)
+    *stage_x = rect.x;
+  if (stage_y)
+    *stage_y = rect.y;
+  if (stage_width)
+    *stage_width = rect.width;
+  if (stage_height)
+    *stage_height = rect.height;
+}
+
 static void
 meta_window_xwayland_class_init (MetaWindowXwaylandClass *klass)
 {
@@ -331,6 +398,8 @@ meta_window_xwayland_class_init (MetaWindowXwaylandClass *klass)
   window_x11_class->thaw_commits = meta_window_xwayland_thaw_commits;
   window_x11_class->always_update_shape = meta_window_xwayland_always_update_shape;
   window_x11_class->process_property_notify = meta_window_xwayland_process_property_notify;
+  window_x11_class->stage_to_protocol = meta_window_xwayland_stage_to_protocol;
+  window_x11_class->protocol_to_stage = meta_window_xwayland_protocol_to_stage;
 
   gobject_class->get_property = meta_window_xwayland_get_property;
   gobject_class->set_property = meta_window_xwayland_set_property;
diff --git a/src/wayland/meta-xwayland-private.h b/src/wayland/meta-xwayland-private.h
index 7a9cb73fdf9..9e06f03155f 100644
--- a/src/wayland/meta-xwayland-private.h
+++ b/src/wayland/meta-xwayland-private.h
@@ -20,6 +20,7 @@
 #include <glib.h>
 
 #include "wayland/meta-wayland-private.h"
+#include "wayland/meta-xwayland.h"
 
 gboolean
 meta_xwayland_init (MetaXWaylandManager    *manager,
diff --git a/src/wayland/meta-xwayland-surface.c b/src/wayland/meta-xwayland-surface.c
index 8fa1c72a969..c6daf9b2670 100644
--- a/src/wayland/meta-xwayland-surface.c
+++ b/src/wayland/meta-xwayland-surface.c
@@ -163,13 +163,19 @@ meta_xwayland_surface_get_relative_coordinates (MetaWaylandSurfaceRole *surface_
                                                 float                  *out_sy)
 {
   MetaXwaylandSurface *xwayland_surface = META_XWAYLAND_SURFACE (surface_role);
+  MetaWaylandSurface *surface =
+    meta_wayland_surface_role_get_surface (surface_role);
+  MetaWaylandCompositor *compositor =
+    meta_wayland_surface_get_compositor (surface);
   MtkRectangle window_rect = { 0 };
+  int xwayland_scale;
 
   if (xwayland_surface->window)
     meta_window_get_buffer_rect (xwayland_surface->window, &window_rect);
 
-  *out_sx = abs_x - window_rect.x;
-  *out_sy = abs_y - window_rect.y;
+  xwayland_scale = meta_xwayland_get_effective_scale (&compositor->xwayland_manager);
+  *out_sx = (abs_x - window_rect.x) * xwayland_scale;
+  *out_sy = (abs_y - window_rect.y) * xwayland_scale;
 }
 
 static MetaWaylandSurface *
diff --git a/src/wayland/meta-xwayland.c b/src/wayland/meta-xwayland.c
index 406f8d21802..eee4bf055ec 100644
--- a/src/wayland/meta-xwayland.c
+++ b/src/wayland/meta-xwayland.c
@@ -1050,6 +1050,29 @@ meta_xwayland_shutdown (MetaWaylandCompositor *compositor)
     }
 }
 
+static void
+update_highest_monitor_scale (MetaXWaylandManager *manager)
+{
+  MetaWaylandCompositor *compositor = manager->compositor;
+  MetaContext *context = meta_wayland_compositor_get_context (compositor);
+  MetaBackend *backend = meta_context_get_backend (context);
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (backend);
+  GList *logical_monitors;
+  GList *l;
+  double scale = 1.0;
+
+  logical_monitors = meta_monitor_manager_get_logical_monitors (monitor_manager);
+  for (l = logical_monitors; l; l = l->next)
+    {
+      MetaLogicalMonitor *logical_monitor = l->data;
+
+      scale = MAX (scale, meta_logical_monitor_get_scale (logical_monitor));
+    }
+
+  manager->highest_monitor_scale = scale;
+}
+
 gboolean
 meta_xwayland_init (MetaXWaylandManager    *manager,
                     MetaWaylandCompositor  *compositor,
@@ -1057,6 +1080,9 @@ meta_xwayland_init (MetaXWaylandManager    *manager,
                     GError                **error)
 {
   MetaContext *context = compositor->context;
+  MetaBackend *backend = meta_context_get_backend (context);
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (backend);
   MetaX11DisplayPolicy policy;
   int display = 0;
 
@@ -1120,6 +1146,10 @@ meta_xwayland_init (MetaXWaylandManager    *manager,
   /* Xwayland specific protocol, needs to be filtered out for all other clients */
   meta_xwayland_grab_keyboard_init (compositor);
 
+  g_signal_connect_swapped (monitor_manager, "monitors-changed-internal",
+                            G_CALLBACK (update_highest_monitor_scale), manager);
+  update_highest_monitor_scale (manager);
+
   return TRUE;
 }
 
@@ -1300,3 +1330,29 @@ meta_xwayland_set_should_enable_ei_portal (MetaXWaylandManager  *manager,
 {
   manager->should_enable_ei_portal = should_enable_ei_portal;
 }
+
+int
+meta_xwayland_get_effective_scale (MetaXWaylandManager *manager)
+{
+  MetaWaylandCompositor *compositor = manager->compositor;
+  MetaContext *context = meta_wayland_compositor_get_context (compositor);
+  MetaBackend *backend = meta_context_get_backend (context);
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (backend);
+  MetaSettings *settings = meta_backend_get_settings (backend);
+
+  switch (meta_monitor_manager_get_layout_mode (monitor_manager))
+    {
+    case META_LOGICAL_MONITOR_LAYOUT_MODE_PHYSICAL:
+      break;
+
+    case META_LOGICAL_MONITOR_LAYOUT_MODE_LOGICAL:
+      if (meta_settings_is_experimental_feature_enabled (settings,
+                                                         META_EXPERIMENTAL_FEATURE_XWAYLAND_NATIVE_SCALING) &&
+          meta_settings_is_experimental_feature_enabled (settings,
+                                                         META_EXPERIMENTAL_FEATURE_SCALE_MONITOR_FRAMEBUFFER))
+        return (int) ceil (manager->highest_monitor_scale);
+    }
+
+  return 1;
+}
diff --git a/src/wayland/meta-xwayland.h b/src/wayland/meta-xwayland.h
index daf9d1abb03..ae7a06977e4 100644
--- a/src/wayland/meta-xwayland.h
+++ b/src/wayland/meta-xwayland.h
@@ -48,3 +48,5 @@ META_EXPORT_TEST
 gboolean meta_xwayland_signal (MetaXWaylandManager  *manager,
                                int                   signum,
                                GError              **error);
+
+int meta_xwayland_get_effective_scale (MetaXWaylandManager *manager);
diff --git a/src/x11/meta-x11-display.c b/src/x11/meta-x11-display.c
index 8b8519d0c5a..962dfaea52e 100644
--- a/src/x11/meta-x11-display.c
+++ b/src/x11/meta-x11-display.c
@@ -131,6 +131,42 @@ backend_from_x11_display (MetaX11Display *x11_display)
   return meta_context_get_backend (context);
 }
 
+static void
+stage_to_protocol (MetaX11Display *x11_display,
+                   int             stage_x,
+                   int             stage_y,
+                   int            *protocol_x,
+                   int            *protocol_y)
+{
+  MetaDisplay *display = meta_x11_display_get_display (x11_display);
+  MetaContext *context = meta_display_get_context (display);
+  int scale = 1;
+
+  switch (meta_context_get_compositor_type (context))
+    {
+    case META_COMPOSITOR_TYPE_WAYLAND:
+      {
+#ifdef HAVE_XWAYLAND
+        MetaWaylandCompositor *wayland_compositor =
+          meta_context_get_wayland_compositor (context);
+        MetaXWaylandManager *xwayland_manager =
+          &wayland_compositor->xwayland_manager;
+
+        scale = meta_xwayland_get_effective_scale (xwayland_manager);
+#endif
+        break;
+      }
+
+    case META_COMPOSITOR_TYPE_X11:
+      break;
+    }
+
+  if (protocol_x)
+    *protocol_x = stage_x * scale;
+  if (protocol_y)
+    *protocol_y = stage_y * scale;
+}
+
 static void
 meta_x11_display_unmanage_windows (MetaX11Display *x11_display)
 {
@@ -181,10 +217,32 @@ update_ui_scaling_factor (MetaX11Display *x11_display)
   MetaX11DisplayPrivate *priv =
     meta_x11_display_get_instance_private (x11_display);
   MetaBackend *backend = backend_from_x11_display (x11_display);
-  MetaSettings *settings = meta_backend_get_settings (backend);
-  int ui_scaling_factor;
+  MetaContext *context = meta_backend_get_context (backend);
+  int ui_scaling_factor = 1;
+
+  switch (meta_context_get_compositor_type (context))
+    {
+    case META_COMPOSITOR_TYPE_WAYLAND:
+      {
+#ifdef HAVE_XWAYLAND
+        MetaWaylandCompositor *wayland_compositor =
+          meta_context_get_wayland_compositor (context);
+        MetaXWaylandManager *xwayland_manager =
+          &wayland_compositor->xwayland_manager;
+
+        ui_scaling_factor = meta_xwayland_get_effective_scale (xwayland_manager);
+#endif
+        break;
+      }
+    case META_COMPOSITOR_TYPE_X11:
+      {
+        MetaSettings *settings = meta_backend_get_settings (backend);
+
+        ui_scaling_factor = meta_settings_get_ui_scaling_factor (settings);
+        break;
+      }
+    }
 
-  ui_scaling_factor = meta_settings_get_ui_scaling_factor (settings);
   meta_dbus_x11_set_ui_scaling_factor (priv->dbus_api, ui_scaling_factor);
 }
 
@@ -638,6 +696,9 @@ set_desktop_geometry_hint (MetaX11Display *x11_display)
     return;
 
   meta_display_get_size (x11_display->display, &monitor_width, &monitor_height);
+  stage_to_protocol (x11_display,
+                     monitor_width, monitor_height,
+                     &monitor_width, &monitor_height);
 
   data[0] = monitor_width;
   data[1] = monitor_height;
@@ -1047,14 +1108,22 @@ set_workspace_work_area_hint (MetaWorkspace  *workspace,
 
   for (l = logical_monitors; l; l = l->next)
     {
-      MtkRectangle area;
+      MtkRectangle stage_area;
+      MtkRectangle protocol_area;
 
-      meta_workspace_get_work_area_for_logical_monitor (workspace, l->data, &area);
+      meta_workspace_get_work_area_for_logical_monitor (workspace, l->data,
+                                                        &stage_area);
 
-      tmp[0] = area.x;
-      tmp[1] = area.y;
-      tmp[2] = area.width;
-      tmp[3] = area.height;
+      stage_to_protocol (x11_display,
+                         stage_area.x, stage_area.y,
+                         &protocol_area.x, &protocol_area.y);
+      stage_to_protocol (x11_display,
+                         stage_area.width, stage_area.height,
+                         &protocol_area.width, &protocol_area.height);
+      tmp[0] = protocol_area.x;
+      tmp[1] = protocol_area.y;
+      tmp[2] = protocol_area.width;
+      tmp[3] = protocol_area.height;
 
       tmp += 4;
     }
@@ -1083,7 +1152,6 @@ set_work_area_hint (MetaDisplay    *display,
   int num_workspaces;
   GList *l;
   unsigned long *data, *tmp;
-  MtkRectangle area;
 
   num_workspaces = meta_workspace_manager_get_n_workspaces (workspace_manager);
   data = g_new (unsigned long, num_workspaces * 4);
@@ -1092,14 +1160,22 @@ set_work_area_hint (MetaDisplay    *display,
   for (l = workspace_manager->workspaces; l; l = l->next)
     {
       MetaWorkspace *workspace = l->data;
+      MtkRectangle stage_area;
+      MtkRectangle protocol_area;
 
-      meta_workspace_get_work_area_all_monitors (workspace, &area);
+      meta_workspace_get_work_area_all_monitors (workspace, &stage_area);
       set_workspace_work_area_hint (workspace, x11_display);
 
-      tmp[0] = area.x;
-      tmp[1] = area.y;
-      tmp[2] = area.width;
-      tmp[3] = area.height;
+      stage_to_protocol (x11_display,
+                         stage_area.x, stage_area.y,
+                         &protocol_area.x, &protocol_area.y);
+      stage_to_protocol (x11_display,
+                         stage_area.width, stage_area.height,
+                         &protocol_area.width, &protocol_area.height);
+      tmp[0] = protocol_area.x;
+      tmp[1] = protocol_area.y;
+      tmp[2] = protocol_area.width;
+      tmp[3] = protocol_area.height;
 
       tmp += 4;
     }
@@ -1279,6 +1355,41 @@ initialize_dbus_interface (MetaX11Display *x11_display)
   update_ui_scaling_factor (x11_display);
 }
 
+static void
+experimental_features_changed (MetaSettings           *settings,
+                               MetaExperimentalFeature old_experimental_features,
+                               MetaX11Display         *x11_display)
+{
+  gboolean was_xwayland_native_scaling;
+  gboolean was_stage_views_scaled;
+  gboolean is_xwayland_native_scaling;
+  gboolean is_stage_views_scaled;
+
+  was_xwayland_native_scaling =
+    !!(old_experimental_features &
+       META_EXPERIMENTAL_FEATURE_XWAYLAND_NATIVE_SCALING);
+  was_stage_views_scaled =
+    !!(old_experimental_features &
+       META_EXPERIMENTAL_FEATURE_SCALE_MONITOR_FRAMEBUFFER);
+
+  is_xwayland_native_scaling =
+    meta_settings_is_experimental_feature_enabled (
+      settings,
+      META_EXPERIMENTAL_FEATURE_XWAYLAND_NATIVE_SCALING);
+  is_stage_views_scaled =
+    meta_settings_is_experimental_feature_enabled (
+      settings,
+      META_EXPERIMENTAL_FEATURE_SCALE_MONITOR_FRAMEBUFFER);
+
+  if (is_xwayland_native_scaling != was_xwayland_native_scaling ||
+      is_stage_views_scaled != was_stage_views_scaled)
+    {
+      update_ui_scaling_factor (x11_display);
+      set_desktop_geometry_hint (x11_display);
+      set_work_area_hint (x11_display->display, x11_display);
+    }
+}
+
 /**
  * meta_x11_display_new:
  *
@@ -1297,6 +1408,7 @@ meta_x11_display_new (MetaDisplay  *display,
   MetaBackend *backend = meta_context_get_backend (context);
   MetaMonitorManager *monitor_manager =
     meta_backend_get_monitor_manager (backend);
+  MetaSettings *settings = meta_backend_get_settings (backend);
   g_autoptr (MetaX11Display) x11_display = NULL;
   Display *xdisplay;
   Screen *xscreen;
@@ -1469,7 +1581,7 @@ meta_x11_display_new (MetaDisplay  *display,
                            "monitors-changed-internal",
                            G_CALLBACK (on_monitors_changed_internal),
                            x11_display,
-                           0);
+                           G_CONNECT_AFTER);
 
   init_leader_window (x11_display, &timestamp);
   x11_display->timestamp = timestamp;
@@ -1562,6 +1674,11 @@ meta_x11_display_new (MetaDisplay  *display,
 
   meta_prefs_add_listener (prefs_changed_callback, x11_display);
 
+  g_signal_connect_object (settings,
+                           "experimental-features-changed",
+                           G_CALLBACK (experimental_features_changed),
+                           x11_display, 0);
+
   set_work_area_hint (display, x11_display);
 
   g_signal_connect_object (display, "workareas-changed",
@@ -1775,16 +1892,12 @@ meta_x11_display_reload_cursor (MetaX11Display *x11_display)
 }
 
 static void
-set_cursor_theme (Display     *xdisplay,
-                  MetaBackend *backend)
+set_cursor_theme (Display    *xdisplay,
+                  const char *theme,
+                  int         size)
 {
-  MetaSettings *settings = meta_backend_get_settings (backend);
-  int scale;
-
-  scale = meta_settings_get_ui_scaling_factor (settings);
-  XcursorSetTheme (xdisplay, meta_prefs_get_cursor_theme ());
-  XcursorSetDefaultSize (xdisplay,
-                         meta_prefs_get_cursor_size () * scale);
+  XcursorSetTheme (xdisplay, theme);
+  XcursorSetDefaultSize (xdisplay, size);
 }
 
 static void
@@ -1836,8 +1949,37 @@ static void
 update_cursor_theme (MetaX11Display *x11_display)
 {
   MetaBackend *backend = backend_from_x11_display (x11_display);
+  MetaContext *context = meta_backend_get_context (backend);
+  MetaSettings *settings = meta_backend_get_settings (backend);
+  int scale = 1;
+  int size;
+  const char *theme;
+
+  switch (meta_context_get_compositor_type (context))
+    {
+    case META_COMPOSITOR_TYPE_WAYLAND:
+      {
+#ifdef HAVE_XWAYLAND
+        MetaWaylandCompositor *wayland_compositor =
+          meta_context_get_wayland_compositor (context);
+        MetaXWaylandManager *xwayland_manager =
+          &wayland_compositor->xwayland_manager;
+
+        scale = meta_xwayland_get_effective_scale (xwayland_manager);
+#endif
+        break;
+      }
+
+    case META_COMPOSITOR_TYPE_X11:
+      scale = meta_settings_get_ui_scaling_factor (settings);
+      break;
+    }
+
+  size = meta_prefs_get_cursor_size () * scale;
+
+  theme = meta_prefs_get_cursor_theme ();
 
-  set_cursor_theme (x11_display->xdisplay, backend);
+  set_cursor_theme (x11_display->xdisplay, theme, size);
   schedule_reload_x11_cursor (x11_display);
 
 #ifdef HAVE_X11
@@ -1846,7 +1988,7 @@ update_cursor_theme (MetaX11Display *x11_display)
       MetaBackendX11 *backend_x11 = META_BACKEND_X11 (backend);
       Display *xdisplay = meta_backend_x11_get_xdisplay (backend_x11);
 
-      set_cursor_theme (xdisplay, backend);
+      set_cursor_theme (xdisplay, theme, size);
       meta_backend_x11_reload_cursor (backend_x11);
     }
 #endif
diff --git a/src/x11/meta-x11-frame.c b/src/x11/meta-x11-frame.c
index 29f72438fcf..e191c696d13 100644
--- a/src/x11/meta-x11-frame.c
+++ b/src/x11/meta-x11-frame.c
@@ -78,6 +78,7 @@ meta_window_x11_set_frame_xwindow (MetaWindow *window,
   g_autoptr (MetaFrame) frame = NULL;
   MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
   MetaWindowX11Private *priv = meta_window_x11_get_private (window_x11);
+  int child_x, child_y;
 
   if (priv->frame)
     return;
@@ -136,12 +137,19 @@ meta_window_x11_set_frame_xwindow (MetaWindow *window,
   meta_stack_tracker_record_remove (window->display->stack_tracker,
                                     meta_window_x11_get_xwindow (window),
                                     XNextRequest (x11_display->xdisplay));
+  meta_window_x11_stage_to_protocol (META_WINDOW_X11 (window),
+                                     frame->child_x,
+                                     frame->child_y,
+                                     0, 0,
+                                     &child_x,
+                                     &child_y,
+                                     NULL, NULL);
 
   XReparentWindow (x11_display->xdisplay,
                    meta_window_x11_get_xwindow (window),
                    frame->xwindow,
-                   frame->child_x,
-                   frame->child_y);
+                   child_x,
+                   child_y);
 
   if (mtk_x11_error_trap_pop_with_return (x11_display->xdisplay))
     {
@@ -239,6 +247,8 @@ meta_window_destroy_frame (MetaWindow *window)
 
   if (!x11_display->closing)
     {
+      int child_x, child_y;
+
       if (!window->unmanaging)
         {
           meta_stack_tracker_record_add (window->display->stack_tracker,
@@ -246,6 +256,14 @@ meta_window_destroy_frame (MetaWindow *window)
                                          XNextRequest (x11_display->xdisplay));
         }
 
+      meta_window_x11_stage_to_protocol (META_WINDOW_X11 (window),
+                                         frame->rect.x + borders.invisible.left,
+                                         frame->rect.y + borders.invisible.top,
+                                         0, 0,
+                                         &child_x,
+                                         &child_y,
+                                         NULL, NULL);
+
       XReparentWindow (x11_display->xdisplay,
                        meta_window_x11_get_xwindow (window),
                        x11_display->xroot,
@@ -253,8 +271,7 @@ meta_window_destroy_frame (MetaWindow *window)
                         * coordinates here means we'll need to ensure a configure
                         * notify event is sent; see bug 399552.
                         */
-                       frame->rect.x + borders.invisible.left,
-                       frame->rect.y + borders.invisible.top);
+                       child_x, child_y);
       window->reparents_pending += 1;
     }
 
@@ -300,6 +317,7 @@ meta_frame_query_borders (MetaFrame        *frame,
                           MetaFrameBorders *borders)
 {
   MetaWindow *window = frame->window;
+  MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
   MetaX11Display *x11_display = window->display->x11_display;
   int format, res;
   Atom type;
@@ -323,12 +341,22 @@ meta_frame_query_borders (MetaFrame        *frame,
   if (mtk_x11_error_trap_pop_with_return (x11_display->xdisplay) == Success &&
       res == Success && nitems == 4)
     {
-      borders->invisible = (MetaFrameBorder) {
-        ((long *) data)[0],
-        ((long *) data)[1],
-        ((long *) data)[2],
-        ((long *) data)[3],
-      };
+      int left, right, top, bottom;
+
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         ((long *) data)[0],
+                                         ((long *) data)[1],
+                                         ((long *) data)[2],
+                                         ((long *) data)[3],
+                                         &left,
+                                         &right,
+                                         &top,
+                                         &bottom);
+
+      borders->invisible.left = left;
+      borders->invisible.right = right;
+      borders->invisible.top = top;
+      borders->invisible.bottom = bottom;
     }
   else
     {
@@ -351,12 +379,21 @@ meta_frame_query_borders (MetaFrame        *frame,
   if (mtk_x11_error_trap_pop_with_return (x11_display->xdisplay) == Success &&
       res == Success && nitems == 4)
     {
-      borders->visible = (MetaFrameBorder) {
-        ((long *) data)[0],
-        ((long *) data)[1],
-        ((long *) data)[2],
-        ((long *) data)[3],
-      };
+      int left, right, top, bottom;
+
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         ((long *) data)[0],
+                                         ((long *) data)[1],
+                                         ((long *) data)[2],
+                                         ((long *) data)[3],
+                                         &left,
+                                         &right,
+                                         &top,
+                                         &bottom);
+      borders->visible.left = left;
+      borders->visible.right = right;
+      borders->visible.top = top;
+      borders->visible.bottom = bottom;
     }
   else
     {
@@ -404,7 +441,9 @@ meta_frame_sync_to_window (MetaFrame *frame,
                            gboolean   need_resize)
 {
   MetaWindow *window = frame->window;
+  MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
   MetaX11Display *x11_display = window->display->x11_display;
+  MtkRectangle rect;
 
   meta_topic (META_DEBUG_GEOMETRY,
               "Syncing frame geometry %d,%d %dx%d (SE: %d,%d)",
@@ -415,12 +454,22 @@ meta_frame_sync_to_window (MetaFrame *frame,
 
   mtk_x11_error_trap_push (x11_display->xdisplay);
 
+  meta_window_x11_stage_to_protocol (window_x11,
+                                     frame->rect.x,
+                                     frame->rect.y,
+                                     frame->rect.width,
+                                     frame->rect.height,
+                                     &rect.x,
+                                     &rect.y,
+                                     &rect.width,
+                                     &rect.height);
+
   XMoveResizeWindow (x11_display->xdisplay,
                      frame->xwindow,
-                     frame->rect.x,
-                     frame->rect.y,
-                     frame->rect.width,
-                     frame->rect.height);
+                     rect.x,
+                     rect.y,
+                     rect.width,
+                     rect.height);
 
   mtk_x11_error_trap_pop (x11_display->xdisplay);
 
@@ -457,6 +506,7 @@ static void
 send_configure_notify (MetaFrame *frame)
 {
   MetaX11Display *x11_display = frame->window->display->x11_display;
+  MetaWindowX11 *window_x11 = META_WINDOW_X11 (frame->window);
   XEvent event = { 0 };
 
   /* We never get told by the frames client, just reassert the
@@ -466,10 +516,16 @@ send_configure_notify (MetaFrame *frame)
   event.xconfigure.display = x11_display->xdisplay;
   event.xconfigure.event = frame->xwindow;
   event.xconfigure.window = frame->xwindow;
-  event.xconfigure.x = frame->rect.x;
-  event.xconfigure.y = frame->rect.y;
-  event.xconfigure.width = frame->rect.width;
-  event.xconfigure.height = frame->rect.height;
+
+  meta_window_x11_stage_to_protocol (window_x11,
+                                     frame->rect.x,
+                                     frame->rect.y,
+                                     frame->rect.width,
+                                     frame->rect.height,
+                                     &event.xconfigure.x,
+                                     &event.xconfigure.y,
+                                     &event.xconfigure.width,
+                                     &event.xconfigure.height);
   event.xconfigure.border_width = 0;
   event.xconfigure.above = None;
   event.xconfigure.override_redirect = False;
diff --git a/src/x11/window-props.c b/src/x11/window-props.c
index c12de92d203..0df14c0d081 100644
--- a/src/x11/window-props.c
+++ b/src/x11/window-props.c
@@ -305,10 +305,15 @@ reload_icon_geometry (MetaWindow    *window,
         {
           MtkRectangle geometry;
 
-          geometry.x = (int)value->v.cardinal_list.cardinals[0];
-          geometry.y = (int)value->v.cardinal_list.cardinals[1];
-          geometry.width = (int)value->v.cardinal_list.cardinals[2];
-          geometry.height = (int)value->v.cardinal_list.cardinals[3];
+          meta_window_x11_protocol_to_stage (META_WINDOW_X11 (window),
+                                             value->v.cardinal_list.cardinals[0],
+                                             value->v.cardinal_list.cardinals[1],
+                                             value->v.cardinal_list.cardinals[2],
+                                             value->v.cardinal_list.cardinals[3],
+                                             &geometry.x,
+                                             &geometry.y,
+                                             &geometry.width,
+                                             &geometry.height);
 
           meta_window_set_icon_geometry (window, &geometry);
         }
@@ -373,11 +378,24 @@ reload_gtk_frame_extents (MetaWindow    *window,
         }
       else
         {
+          int left, right, top, bottom;
           MetaFrameBorder extents;
-          extents.left   = (int)value->v.cardinal_list.cardinals[0];
-          extents.right  = (int)value->v.cardinal_list.cardinals[1];
-          extents.top    = (int)value->v.cardinal_list.cardinals[2];
-          extents.bottom = (int)value->v.cardinal_list.cardinals[3];
+
+          meta_window_x11_protocol_to_stage (META_WINDOW_X11 (window),
+                                             value->v.cardinal_list.cardinals[0],
+                                             value->v.cardinal_list.cardinals[1],
+                                             value->v.cardinal_list.cardinals[2],
+                                             value->v.cardinal_list.cardinals[3],
+                                             &left,
+                                             &right,
+                                             &top,
+                                             &bottom);
+
+          extents.left = left;
+          extents.right = right;
+          extents.top = top;
+          extents.bottom = bottom;
+
           meta_window_set_custom_frame_extents (window, &extents, initial);
         }
     }
@@ -682,10 +700,16 @@ reload_opaque_region (MetaWindow    *window,
         {
           MtkRectangle *rect = &rects[rect_index];
 
-          rect->x = region[i++];
-          rect->y = region[i++];
-          rect->width = region[i++];
-          rect->height = region[i++];
+          meta_window_x11_protocol_to_stage (META_WINDOW_X11 (window),
+                                             region[i + 0],
+                                             region[i + 1],
+                                             region[i + 2],
+                                             region[i + 3],
+                                             &rect->x,
+                                             &rect->y,
+                                             &rect->width,
+                                             &rect->height);
+          i += 4;
 
           rect_index++;
         }
@@ -1219,11 +1243,60 @@ hints_have_changed (const MetaSizeHints *old,
          FLAG_TOGGLED_OFF (old, new, META_SIZE_HINTS_PROGRAM_WIN_GRAVITY);
 }
 
+static void
+scale_size_hints (MetaWindowX11 *window_x11,
+                  MetaSizeHints *hints)
+{
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     hints->x, hints->y,
+                                     hints->width, hints->height,
+                                     &hints->x, &hints->y,
+                                     &hints->width, &hints->height);
+
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     hints->min_width, hints->min_height,
+                                     0, 0,
+                                     &hints->min_width, &hints->min_height,
+                                     NULL, NULL);
+
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     hints->max_width, hints->max_height,
+                                     0, 0,
+                                     &hints->max_width, &hints->max_height,
+                                     NULL, NULL);
+
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     hints->width_inc, hints->height_inc,
+                                     0, 0,
+                                     &hints->width_inc, &hints->height_inc,
+                                     NULL, NULL);
+
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     hints->min_aspect.x, hints->min_aspect.y,
+                                     0, 0,
+                                     &hints->min_aspect.x, &hints->min_aspect.y,
+                                     NULL, NULL);
+
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     hints->max_aspect.x, hints->max_aspect.y,
+                                     0, 0,
+                                     &hints->max_aspect.x, &hints->max_aspect.y,
+                                     NULL, NULL);
+
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     hints->base_width, hints->base_height,
+                                     0, 0,
+                                     &hints->base_width, &hints->base_height,
+                                     NULL, NULL);
+}
+
 static void
 reload_normal_hints (MetaWindow    *window,
                      MetaPropValue *value,
                      gboolean       initial)
 {
+  MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
+
   if (value->type != META_PROP_VALUE_INVALID)
     {
       MetaSizeHints old_hints;
@@ -1233,8 +1306,18 @@ reload_normal_hints (MetaWindow    *window,
 
       old_hints = window->size_hints;
 
-      meta_window_set_normal_hints (window,
-                                    (MetaSizeHints*)value->v.size_hints.hints);
+      if (value->v.size_hints.hints)
+        {
+          MetaSizeHints new_hints;
+
+          new_hints = *(MetaSizeHints *) value->v.size_hints.hints;
+          scale_size_hints (window_x11, &new_hints);
+          meta_window_set_normal_hints (window, &new_hints);
+        }
+      else
+        {
+          meta_window_set_normal_hints (window, NULL);
+        }
 
       hints_have_differences = hints_have_changed (&old_hints,
                                                    &window->size_hints);
diff --git a/src/x11/window-x11.c b/src/x11/window-x11.c
index d02427f9e67..219a0feb8e0 100644
--- a/src/x11/window-x11.c
+++ b/src/x11/window-x11.c
@@ -111,6 +111,113 @@ meta_window_x11_get_private (MetaWindowX11 *window_x11)
   return meta_window_x11_get_instance_private (window_x11);
 }
 
+static void
+meta_window_x11_real_stage_to_protocol (MetaWindowX11 *window_x11,
+                                        int            stage_x,
+                                        int            stage_y,
+                                        int            stage_width,
+                                        int            stage_height,
+                                        int           *protocol_x,
+                                        int           *protocol_y,
+                                        int           *protocol_width,
+                                        int           *protocol_height)
+{
+  if (protocol_x)
+    *protocol_x = stage_x;
+  if (protocol_y)
+    *protocol_y = stage_y;
+  if (protocol_width)
+    *protocol_width = stage_width;
+  if (protocol_height)
+    *protocol_height = stage_height;
+}
+
+static void
+meta_window_x11_real_protocol_to_stage (MetaWindowX11 *window_x11,
+                                        int            protocol_x,
+                                        int            protocol_y,
+                                        int            protocol_width,
+                                        int            protocol_height,
+                                        int           *stage_x,
+                                        int           *stage_y,
+                                        int           *stage_width,
+                                        int           *stage_height)
+{
+  if (stage_x)
+    *stage_x = protocol_x;
+  if (stage_y)
+    *stage_y = protocol_y;
+  if (stage_width)
+    *stage_width = protocol_width;
+  if (stage_height)
+    *stage_height = protocol_height;
+}
+
+void
+meta_window_x11_stage_to_protocol (MetaWindowX11 *window_x11,
+                                   int            stage_x,
+                                   int            stage_y,
+                                   int            stage_width,
+                                   int            stage_height,
+                                   int           *protocol_x,
+                                   int           *protocol_y,
+                                   int           *protocol_width,
+                                   int           *protocol_height)
+{
+  MetaWindowX11Class *klass = META_WINDOW_X11_GET_CLASS (window_x11);
+
+  klass->stage_to_protocol (window_x11,
+                            stage_x, stage_y,
+                            stage_width, stage_height,
+                            protocol_x, protocol_y,
+                            protocol_width, protocol_height);
+}
+
+void
+meta_window_x11_protocol_to_stage (MetaWindowX11 *window_x11,
+                                   int            protocol_x,
+                                   int            protocol_y,
+                                   int            protocol_width,
+                                   int            protocol_height,
+                                   int           *stage_x,
+                                   int           *stage_y,
+                                   int           *stage_width,
+                                   int           *stage_height)
+{
+  MetaWindowX11Class *klass = META_WINDOW_X11_GET_CLASS (window_x11);
+
+  klass->protocol_to_stage (window_x11,
+                            protocol_x, protocol_y,
+                            protocol_width, protocol_height,
+                            stage_x, stage_y,
+                            stage_width, stage_height);
+}
+
+static MtkRegion *
+region_protocol_to_stage (MtkRegion     *region,
+                          MetaWindowX11 *window_x11)
+{
+  int n_rects, i;
+  MtkRectangle *rects;
+  MtkRegion *scaled_region;
+
+  n_rects = mtk_region_num_rectangles (region);
+  MTK_RECTANGLE_CREATE_ARRAY_SCOPED (n_rects, rects);
+  for (i = 0; i < n_rects; i++)
+    {
+      rects[i] = mtk_region_get_rectangle (region, i);
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         rects[i].x, rects[i].y,
+                                         rects[i].width, rects[i].height,
+                                         &rects[i].x, &rects[i].y,
+                                         &rects[i].width, &rects[i].height);
+    }
+
+  scaled_region = mtk_region_create_rectangles (rects, n_rects);
+
+  return scaled_region;
+}
+
 static void
 send_icccm_message (MetaWindow *window,
                     Atom        atom,
@@ -255,8 +362,13 @@ send_configure_notify (MetaWindow *window)
   event.xconfigure.display = x11_display->xdisplay;
   event.xconfigure.event = priv->xwindow;
   event.xconfigure.window = priv->xwindow;
-  event.xconfigure.x = priv->client_rect.x - priv->border_width;
-  event.xconfigure.y = priv->client_rect.y - priv->border_width;
+  meta_window_x11_stage_to_protocol (window_x11,
+                                     priv->client_rect.x - priv->border_width,
+                                     priv->client_rect.y - priv->border_width,
+                                     0, 0,
+                                     &event.xconfigure.x,
+                                     &event.xconfigure.y,
+                                     NULL, NULL);
   if (priv->frame)
     {
       if (window->withdrawn)
@@ -268,19 +380,42 @@ send_configure_notify (MetaWindow *window)
 
           meta_frame_calc_borders (priv->frame, &borders);
 
-          event.xconfigure.x = priv->frame->rect.x + borders.invisible.left;
-          event.xconfigure.y = priv->frame->rect.y + borders.invisible.top;
+          meta_window_x11_stage_to_protocol (window_x11,
+                                             priv->frame->rect.x + borders.invisible.left,
+                                             priv->frame->rect.y + borders.invisible.top,
+                                             0, 0,
+                                             &event.xconfigure.x,
+                                             &event.xconfigure.y,
+                                             NULL, NULL);
         }
       else
         {
+          int dx, dy;
+
           /* Need to be in root window coordinates */
-          event.xconfigure.x += priv->frame->rect.x;
-          event.xconfigure.y += priv->frame->rect.y;
+          meta_window_x11_stage_to_protocol (window_x11,
+                                             priv->frame->rect.x,
+                                             priv->frame->rect.y,
+                                             0, 0,
+                                             &dx,
+                                             &dy,
+                                             NULL, NULL);
+          event.xconfigure.x += dx;
+          event.xconfigure.y += dy;
         }
     }
-  event.xconfigure.width = priv->client_rect.width;
-  event.xconfigure.height = priv->client_rect.height;
-  event.xconfigure.border_width = priv->border_width; /* requested not actual */
+  meta_window_x11_stage_to_protocol (window_x11,
+                                     priv->client_rect.width,
+                                     priv->client_rect.height,
+                                     0, 0,
+                                     &event.xconfigure.width,
+                                     &event.xconfigure.height,
+                                     NULL, NULL);
+  meta_window_x11_stage_to_protocol (window_x11,
+                                     priv->border_width,
+                                     0, 0, 0,
+                                     &event.xconfigure.border_width,
+                                     NULL, NULL, NULL);
   event.xconfigure.above = None; /* FIXME */
   event.xconfigure.override_redirect = False;
 
@@ -1150,20 +1285,26 @@ update_net_frame_extents (MetaWindow *window)
   MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
   MetaWindowX11Private *priv = meta_window_x11_get_instance_private (window_x11);
   MetaX11Display *x11_display = window->display->x11_display;
-
+  int left, right, top, bottom;
   unsigned long data[4];
   MetaFrameBorders borders;
   Window xwindow = meta_window_x11_get_xwindow (window);
 
   meta_frame_calc_borders (priv->frame, &borders);
-  /* Left */
-  data[0] = borders.visible.left;
-  /* Right */
-  data[1] = borders.visible.right;
-  /* Top */
-  data[2] = borders.visible.top;
-  /* Bottom */
-  data[3] = borders.visible.bottom;
+  meta_window_x11_stage_to_protocol (META_WINDOW_X11 (window),
+                                     borders.visible.left,
+                                     borders.visible.right,
+                                     borders.visible.top,
+                                     borders.visible.bottom,
+                                     &left,
+                                     &right,
+                                     &top,
+                                     &bottom);
+
+  data[0] = left;
+  data[1] = right;
+  data[2] = top;
+  data[3] = bottom;
 
   meta_topic (META_DEBUG_GEOMETRY,
               "Setting _NET_FRAME_EXTENTS on managed window 0x%lx "
@@ -1496,10 +1637,11 @@ meta_window_x11_move_resize_internal (MetaWindow                *window,
     configure_frame_first = size_dx + size_dy >= 0;
 
   values.border_width = 0;
-  values.x = client_rect.x;
-  values.y = client_rect.y;
-  values.width = client_rect.width;
-  values.height = client_rect.height;
+  meta_window_x11_stage_to_protocol (window_x11,
+                                     client_rect.x, client_rect.y,
+                                     client_rect.width, client_rect.height,
+                                     &values.x, &values.y,
+                                     &values.width, &values.height);
 
   mask = 0;
   if (is_configure_request && priv->border_width != 0)
@@ -1603,6 +1745,10 @@ meta_window_x11_update_struts (MetaWindow *window)
               strut_begin = struts[4+(i*2)];
               strut_end   = struts[4+(i*2)+1];
 
+              meta_window_x11_protocol_to_stage (META_WINDOW_X11 (window),
+                                                 strut_begin, strut_end, thickness, 0,
+                                                 &strut_begin, &strut_end, &thickness, NULL);
+
               temp = g_new0 (MetaStrut, 1);
               temp->side = 1 << i; /* See MetaSide def.  Matches nicely, eh? */
               meta_display_get_size (window->display,
@@ -1667,6 +1813,10 @@ meta_window_x11_update_struts (MetaWindow *window)
               if (thickness == 0)
                 continue;
 
+              meta_window_x11_protocol_to_stage (META_WINDOW_X11 (window),
+                                                 thickness, 0, 0, 0,
+                                                 &thickness, NULL, NULL, NULL);
+
               temp = g_new0 (MetaStrut, 1);
               temp->side = 1 << i;
               meta_display_get_size (window->display,
@@ -2060,9 +2210,10 @@ static void
 meta_window_x11_constructed (GObject *object)
 {
   MetaWindow *window = META_WINDOW (object);
-  MetaWindowX11 *x11_window = META_WINDOW_X11 (object);
-  MetaWindowX11Private *priv = meta_window_x11_get_instance_private (x11_window);
+  MetaWindowX11 *window_x11 = META_WINDOW_X11 (object);
+  MetaWindowX11Private *priv = meta_window_x11_get_instance_private (window_x11);
   XWindowAttributes attrs = priv->attributes;
+  MtkRectangle rect;
 
   meta_verbose ("attrs->map_state = %d (%s)",
                 attrs.map_state,
@@ -2077,16 +2228,17 @@ meta_window_x11_constructed (GObject *object)
   window->client_type = META_WINDOW_CLIENT_TYPE_X11;
   window->override_redirect = attrs.override_redirect;
 
-  window->rect.x = attrs.x;
-  window->rect.y = attrs.y;
-  window->rect.width = attrs.width;
-  window->rect.height = attrs.height;
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     attrs.x, attrs.y, attrs.width, attrs.height,
+                                     &rect.x, &rect.y, &rect.width, &rect.height);
+
+  window->rect = rect;
 
   /* size_hints are the "request" */
-  window->size_hints.x = attrs.x;
-  window->size_hints.y = attrs.y;
-  window->size_hints.width = attrs.width;
-  window->size_hints.height = attrs.height;
+  window->size_hints.x = rect.x;
+  window->size_hints.y = rect.y;
+  window->size_hints.width = rect.width;
+  window->size_hints.height = rect.height;
 
   window->depth = attrs.depth;
   priv->xvisual = attrs.visual;
@@ -2097,11 +2249,11 @@ meta_window_x11_constructed (GObject *object)
   priv->frame = NULL;
   window->decorated = TRUE;
   window->hidden = FALSE;
-  priv->border_width = attrs.border_width;
   priv->xclient_leader = None;
 
-  priv->keys_grabbed = FALSE;
-  priv->grab_on_frame = FALSE;
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     attrs.border_width, 0, 0, 0,
+                                     &priv->border_width, NULL, NULL, NULL);
 
   g_signal_connect (window, "notify::decorated",
                     G_CALLBACK (meta_window_x11_update_input_region),
@@ -2215,6 +2367,8 @@ meta_window_x11_class_init (MetaWindowX11Class *klass)
   klass->thaw_commits = meta_window_x11_impl_thaw_commits;
   klass->always_update_shape = meta_window_x11_impl_always_update_shape;
   klass->process_property_notify = meta_window_x11_impl_process_property_notify;
+  klass->stage_to_protocol = meta_window_x11_real_stage_to_protocol;
+  klass->protocol_to_stage = meta_window_x11_real_protocol_to_stage;
 
   obj_props[PROP_ATTRIBUTES] =
     g_param_spec_pointer ("attributes", NULL, NULL,
@@ -2496,7 +2650,10 @@ meta_window_x11_update_input_region (MetaWindow *window)
       else
         {
           /* Window has a custom shape. */
-          region = region_create_from_x_rectangles (rects, n_rects);
+          g_autoptr (MtkRegion) protocol_region = NULL;
+
+          protocol_region = region_create_from_x_rectangles (rects, n_rects);
+          region = region_protocol_to_stage (protocol_region, window_x11);
         }
 
       meta_XFree (rects);
@@ -2572,7 +2729,10 @@ meta_window_x11_update_shape_region (MetaWindow *window)
 
       if (rects)
         {
-          region = region_create_from_x_rectangles (rects, n_rects);
+          g_autoptr (MtkRegion) protocol_region = NULL;
+
+          protocol_region = region_create_from_x_rectangles (rects, n_rects);
+          region = region_protocol_to_stage (protocol_region, window_x11);
           XFree (rects);
         }
     }
@@ -2959,6 +3119,7 @@ meta_window_x11_configure_request (MetaWindow *window,
 {
   MetaWindowX11 *window_x11 = META_WINDOW_X11 (window);
   MetaWindowX11Private *priv = meta_window_x11_get_instance_private (window_x11);
+  int new_x, new_y, new_width, new_height;
 
   /* Note that x, y is the corner of the window border,
    * and width, height is the size of the window inside
@@ -2967,15 +3128,25 @@ meta_window_x11_configure_request (MetaWindow *window,
    * requested border here.
    */
   if (event->xconfigurerequest.value_mask & CWBorderWidth)
-    priv->border_width = event->xconfigurerequest.border_width;
+    {
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         event->xconfigurerequest.border_width, 0, 0, 0,
+                                         &priv->border_width, NULL, NULL, NULL);
+    }
 
-  meta_window_move_resize_request(window,
-                                  event->xconfigurerequest.value_mask,
-                                  window->size_hints.win_gravity,
-                                  event->xconfigurerequest.x,
-                                  event->xconfigurerequest.y,
-                                  event->xconfigurerequest.width,
-                                  event->xconfigurerequest.height);
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     event->xconfigurerequest.x, event->xconfigurerequest.y,
+                                     event->xconfigurerequest.width, event->xconfigurerequest.height,
+                                     &new_x, &new_y,
+                                     &new_width, &new_height);
+
+  meta_window_move_resize_request (window,
+                                   event->xconfigurerequest.value_mask,
+                                   window->size_hints.win_gravity,
+                                   new_x,
+                                   new_y,
+                                   new_width,
+                                   new_height);
 
   /* Handle stacking. We only handle raises/lowers, mostly because
    * stack.c really can't deal with anything else.  I guess we'll fix
@@ -3471,8 +3642,13 @@ meta_window_x11_client_message (MetaWindow *window,
       guint32 timestamp;
       MetaWindowDrag *window_drag;
 
-      x_root = event->xclient.data.l[0];
-      y_root = event->xclient.data.l[1];
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         event->xclient.data.l[0],
+                                         event->xclient.data.l[1],
+                                         0, 0,
+                                         &x_root,
+                                         &y_root,
+                                         NULL, NULL);
       action = event->xclient.data.l[2];
       button = event->xclient.data.l[3];
 
@@ -3636,6 +3812,7 @@ meta_window_x11_client_message (MetaWindow *window,
     {
       MetaGravity gravity;
       guint value_mask;
+      int x, y, width, height;
 
       gravity = (MetaGravity) (event->xclient.data.l[0] & 0xff);
       value_mask = (event->xclient.data.l[0] & 0xf00) >> 8;
@@ -3644,13 +3821,20 @@ meta_window_x11_client_message (MetaWindow *window,
       if (gravity == 0)
         gravity = window->size_hints.win_gravity;
 
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         event->xclient.data.l[1],
+                                         event->xclient.data.l[2],
+                                         event->xclient.data.l[3],
+                                         event->xclient.data.l[4],
+                                         &x, &y, &width, &height);
+
       meta_window_move_resize_request(window,
                                       value_mask,
                                       gravity,
-                                      event->xclient.data.l[1],  /* x */
-                                      event->xclient.data.l[2],  /* y */
-                                      event->xclient.data.l[3],  /* width */
-                                      event->xclient.data.l[4]); /* height */
+                                      x,
+                                      y,
+                                      width,
+                                      height);
     }
   else if (event->xclient.message_type ==
            x11_display->atom__NET_ACTIVE_WINDOW &&
@@ -3707,11 +3891,15 @@ meta_window_x11_client_message (MetaWindow *window,
   else if (event->xclient.message_type ==
            x11_display->atom__GTK_SHOW_WINDOW_MENU)
     {
-      gulong x, y;
+      int x, y;
 
       /* l[0] is device_id, which we don't use */
-      x = event->xclient.data.l[1];
-      y = event->xclient.data.l[2];
+      meta_window_x11_protocol_to_stage (window_x11,
+                                         event->xclient.data.l[1],
+                                         event->xclient.data.l[2],
+                                         0, 0,
+                                         &x, &y,
+                                         NULL, NULL);
 
       meta_window_show_menu (window, META_WINDOW_MENU_WM, x, y);
     }
@@ -4237,10 +4425,11 @@ meta_window_x11_configure_notify (MetaWindow      *window,
   g_assert (window->override_redirect);
   g_assert (priv->frame == NULL);
 
-  window->rect.x = event->x;
-  window->rect.y = event->y;
-  window->rect.width = event->width;
-  window->rect.height = event->height;
+  meta_window_x11_protocol_to_stage (window_x11,
+                                     event->x, event->y,
+                                     event->width, event->height,
+                                     &window->rect.x, &window->rect.y,
+                                     &window->rect.width, &window->rect.height);
 
   priv->client_rect = window->rect;
   window->buffer_rect = window->rect;
diff --git a/src/x11/window-x11.h b/src/x11/window-x11.h
index 5fd8517b4c5..02689dfbbbe 100644
--- a/src/x11/window-x11.h
+++ b/src/x11/window-x11.h
@@ -46,6 +46,24 @@ struct _MetaWindowX11Class
   gboolean (*always_update_shape) (MetaWindow *window);
   void (*process_property_notify) (MetaWindow     *window,
                                    XPropertyEvent *event);
+  void (*stage_to_protocol) (MetaWindowX11 *window_x11,
+                             int            stage_x,
+                             int            stage_y,
+                             int            stage_width,
+                             int            stage_height,
+                             int           *protocol_x,
+                             int           *protocol_y,
+                             int           *protocol_width,
+                             int           *protocol_height);
+  void (*protocol_to_stage) (MetaWindowX11 *window_x11,
+                             int            protocol_x,
+                             int            protocol_y,
+                             int            protocol_width,
+                             int            protocol_height,
+                             int           *stage_x,
+                             int           *stage_y,
+                             int           *stage_width,
+                             int           *stage_height);
 };
 
 MetaWindow * meta_window_x11_new           (MetaDisplay        *display,
@@ -116,3 +134,23 @@ gboolean meta_window_x11_has_alpha_channel (MetaWindow *window);
 
 META_EXPORT
 Window meta_window_x11_get_xwindow (MetaWindow *window);
+
+void meta_window_x11_stage_to_protocol (MetaWindowX11 *window_x11,
+                                        int            stage_x,
+                                        int            stage_y,
+                                        int            stage_width,
+                                        int            stage_heigth,
+                                        int           *protocol_x,
+                                        int           *protocol_y,
+                                        int           *protocol_width,
+                                        int           *protocol_height);
+
+void meta_window_x11_protocol_to_stage (MetaWindowX11 *window_x11,
+                                        int            protocol_x,
+                                        int            protocol_y,
+                                        int            protocol_width,
+                                        int            protocol_height,
+                                        int           *stage_x,
+                                        int           *stage_y,
+                                        int           *stage_width,
+                                        int           *stage_heigth);
-- 
GitLab


From 077b4463129ec56c70c583de4bdec462a6bd147a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 19 Aug 2024 17:26:24 +0200
Subject: [PATCH 8/8] settings: Allow overriding experimental settings with an
 env var

This makes it simpler to experiment with experimental settings without
having to make changes to any gsettings fields one might not want to
change.
---
 src/backends/meta-settings.c | 34 ++++++++++++++++++++++++++++++----
 1 file changed, 30 insertions(+), 4 deletions(-)

diff --git a/src/backends/meta-settings.c b/src/backends/meta-settings.c
index 1ae59d6360b..8ac09390464 100644
--- a/src/backends/meta-settings.c
+++ b/src/backends/meta-settings.c
@@ -323,10 +323,36 @@ experimental_features_handler (GVariant *features_variant,
 static gboolean
 update_experimental_features (MetaSettings *settings)
 {
-  return GPOINTER_TO_INT (g_settings_get_mapped (settings->mutter_settings,
-                                                 "experimental-features",
-                                                 experimental_features_handler,
-                                                 settings));
+  const char *experimental_features_env;
+
+  experimental_features_env = getenv ("MUTTER_DEBUG_EXPERIMENTAL_FEATURES");
+  if (experimental_features_env)
+    {
+      g_autoptr (GVariant) features_variant = NULL;
+      g_autoptr (GError) error = NULL;
+      gpointer result;
+
+      features_variant = g_variant_parse (G_VARIANT_TYPE ("as"),
+                                          experimental_features_env,
+                                          NULL, NULL,
+                                          &error);
+      if (!features_variant)
+        {
+          g_warning ("Failed to parse experimental features debug environment: %s",
+                     error->message);
+          return FALSE;
+        }
+
+      experimental_features_handler (features_variant, &result, settings);
+      return GPOINTER_TO_INT (result);
+    }
+  else
+    {
+      return GPOINTER_TO_INT (g_settings_get_mapped (settings->mutter_settings,
+                                                     "experimental-features",
+                                                     experimental_features_handler,
+                                                     settings));
+    }
 }
 
 static void
-- 
GitLab

